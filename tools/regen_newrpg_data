#!/usr/bin/env python
"""Generate a module including entire compressed data of OHRRPGCE.NEW
   (base64-encoded), with auto decoding.

   Used to recreate _newrpg.py when OHRRPGCE.NEW changes."""

from cStringIO import StringIO as SIO
import gzip
import os
import sys
from hashlib import md5
from base64 import b64encode

if len (sys.argv) < 3:
    print ('Syntax: %s <ohrrpgce.new> <outputmodule>' % sys.argv[0])
    print ('\nTypical invocation:  "regen_newrpg_data /path/to/ohrrpgce.new ../nohrio/_newrpg.py "')
    sys.exit(0)

uncompressed_size = os.path.getsize (sys.argv[1])
l1 = SIO ()
l2 = gzip.GzipFile (fileobj = l1, mode = 'wb')
infile = open (sys.argv[1],'rb')
tmp = infile.read()
md5 = md5(tmp)
l2.write (tmp)
l2.close()
v = l1.getvalue()
compressed_size = len(v)
ratio = compressed_size / float (uncompressed_size)
ratio_b64 = (compressed_size * (8/6.)) / float (uncompressed_size)
print ('md5 sum:\t%r' % md5.hexdigest())
print ('length after compression: %04d (ratio: %f / %f)' % (compressed_size,
                                                            ratio, ratio_b64))
outfile = open (sys.argv[2],'wb')
outfile.write ('# autogenerated file, do not edit!\n##\n')
outfile.write ('md5sum = %r\n' % md5.hexdigest())
outfile.write ('data = "' + b64encode(v) +'"\n\n')
outfile.write ('from base64 import b64decode\n')
outfile.write ('data = b64decode (data)\n')
outfile.write ('def gunzip ():\n  import gzip\n  from cStringIO import StringIO as SIO\n')
outfile.write ('  from hashlib import md5\n')
outfile.write ('  tmp=gzip.GzipFile(mode = \'rb\', fileobj = SIO (data)).read()\n')
outfile.write ('  md5 = md5(tmp).hexdigest()\n  if md5 != md5sum:\n  ')
outfile.write ('    raise IOError (\'Corrupted data!\')\n  return tmp\n')
outfile.close()