# autogenerated file, do not edit!
##
md5sum = 'af4870529a7fc71bd65f246acc3ac298'
data = "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"

from base64 import b64decode
data = b64decode (data)
def gunzip ():
  import gzip
  from cStringIO import StringIO as SIO
  from hashlib import md5
  tmp=gzip.GzipFile(mode = 'rb', fileobj = SIO (data)).read()
  md5 = md5(tmp).hexdigest()
  if md5 != md5sum:
      raise IOError ('Corrupted data!')
  return tmp
